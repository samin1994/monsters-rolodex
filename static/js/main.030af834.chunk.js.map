{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","err","console","log","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,EAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJdM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCsCjEG,E,kDApCb,aAAe,IAAD,8BACZ,gBAOFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAPrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAYO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAACC,GAAe,OAAOA,EAASC,UACrCF,MAAK,SAACG,GAAY,EAAKT,SAAS,CAACT,SAAUkB,OAC3CC,OAAM,SAACC,GAASC,QAAQC,IAAI,2B,+BAGrB,IAAD,EAC2BC,KAAKV,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZc,EAAmBxB,EAASyB,QAAO,SAAC9B,GACtC,OAAOA,EAAQE,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAG3D,OACE,sBAAKlC,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcmB,KAAKnB,eAC5D,cAAC,EAAD,CAAUJ,SAAUwB,W,GA/BVI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.030af834.chunk.js","sourcesContent":["import React from 'react'\nimport '../card/card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n    \n    <div className=\"card-list\">\n        {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster}/>\n        ))}\n    </div>\n   \n);","import React from 'react'\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange}) => (\n    <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n)","import './App.css';\nimport React from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => { return response.json() })\n    .then((users) => { this.setState({monsters: users}) })\n    .catch((err) => {console.log('there was an error')});\n  }\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter((monster) => {\n        return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className='App'>\n        <h1> Monsters Rolodex </h1>\n        <SearchBox placeholder='search monsters' handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}/>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}